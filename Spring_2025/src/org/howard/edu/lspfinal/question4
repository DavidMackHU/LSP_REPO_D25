During our discussions in class over the past two weeks, we've discussed the different design patterns. The patterns that stood out to me the most were the Facade and Singleton patterns. In class, we talked about how the facade pattern helps simplify access to complex subsystems. The Singleton Pattern is very similar because it ensures a class only has one instance, but it could also present an issue for unit testing and overall flexibility. In your lecture, I remember the tea and coffee example, which were both drinks and had similar methods(boiling water, brew, pouring). If we used the Facade or Singleton patterns here, we would lose flexibility. Our lecture emphasized that patterns should be used for specific problems. Misusing patterns makes your code harder to follow and run. The problem dictates the pattern, not the other way around. 
